# single lanternfish starting from 6
# after 7 days 0
# after 8 days
# 6,8
# 6,5,4,3,2,1,0,6,5,4,3,2,1,0,
#               8,7,6,5,4,3,2,1,0,6,5,4,3,2,1,0
#                           8,7,6
#
#
#
# from 8 to 0, how many will an angelfish a single angelfish birth in n days
# 9 x 256
#
# recursive relationship?
# 6 256 = 5 255 = 4 254 = 3 253 = 2 252 = 1 251 = 0 250 = 6 249 + 1
#
def compute_single(i, j)
  if $single_fish_day[i][j] != -1
    return $single_fish_day[i][j]
  end
  if i != 0
    compute_single(i - 1, j - 1)
  else
    compute_single(6, j - 1) + 1
  end
end

def fill_fish_exponent (i, max_days)
  sum = 0
  j = max_days
  first = true
  while j > 0
    sum += $single_fish_day[i][j]
    if first
      j -= 9
      first = false
    else
      j -= 7
    end
    sum += fill_fish_exponent(i, j)
  end
  sum
end

$stdout.sync = true
# What is the number of extra fish generated by a single fish in n days
$single_fish_day = Array.new(9) { Array.new(257, -1) }
# initialize
for i in 0...9
  for j in 0..i
    $single_fish_day[i][j] = 0
  end
end
# fill values
for i in 0...9
  for j in 0...257
    if $single_fish_day[i][j] == -1
      $single_fish_day[i][j] = compute_single(i, j)
    end
  end
end
#$single_fish_day.each_with_index { |arr, i| puts "#{i} = #{arr}" }

$fish_exponent = Array.new(7, 0)
for i in 0...7 do
  $fish_exponent[i] = fill_fish_exponent(i, 256)
end
a = gets.split(',').map(&:to_i)
res = a.reduce(a.size) { |sum, i| sum += $fish_exponent[i] }
puts res


